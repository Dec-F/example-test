/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.linkerProtocol.AnchorIndicateNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.AnchorLive', null, global);
goog.exportSymbol('proto.linkerProtocol.AnchorLiveStatusNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.BagNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.BagUp', null, global);
goog.exportSymbol('proto.linkerProtocol.BannerNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.ChatNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.ChatUp', null, global);
goog.exportSymbol('proto.linkerProtocol.DialogButton', null, global);
goog.exportSymbol('proto.linkerProtocol.DialogNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.Ext', null, global);
goog.exportSymbol('proto.linkerProtocol.FollowedNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.GiftNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.GiftUp', null, global);
goog.exportSymbol('proto.linkerProtocol.GiftboxDone', null, global);
goog.exportSymbol('proto.linkerProtocol.GlobalMsg', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessAward', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessGuide', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessItem', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessSubject', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessUpdate', null, global);
goog.exportSymbol('proto.linkerProtocol.GuessWin', null, global);
goog.exportSymbol('proto.linkerProtocol.HonorLevelUp', null, global);
goog.exportSymbol('proto.linkerProtocol.KickoutNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkAccept', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkApply', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkBroadcast', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkCancel', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkClose', null, global);
goog.exportSymbol('proto.linkerProtocol.LinkNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.LiveData', null, global);
goog.exportSymbol('proto.linkerProtocol.LoginReq', null, global);
goog.exportSymbol('proto.linkerProtocol.LoginResp', null, global);
goog.exportSymbol('proto.linkerProtocol.ManagerNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.MapEntry', null, global);
goog.exportSymbol('proto.linkerProtocol.OfficialLiveLikeNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.OfficialLiveLikeUp', null, global);
goog.exportSymbol('proto.linkerProtocol.OfficialLiveNavigationChange', null, global);
goog.exportSymbol('proto.linkerProtocol.OfficialLiveStatusNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.RectifyRoomNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.RedEnvelopeNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.RetetionAttr', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomAttr', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomGuardNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomJoinNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomJoinNotifyUp', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomJoinReq', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomJoinResp', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomLeaveReq', null, global);
goog.exportSymbol('proto.linkerProtocol.RoomUpdateNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.SharedNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.TextAttribe', null, global);
goog.exportSymbol('proto.linkerProtocol.User', null, global);
goog.exportSymbol('proto.linkerProtocol.UserAttrNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.UserLevelUpNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.ZanNotify', null, global);
goog.exportSymbol('proto.linkerProtocol.ZanUp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.User.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.User.displayName = 'proto.linkerProtocol.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.User.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.User.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    gender: jspb.Message.getField(msg, 2),
    verified: jspb.Message.getField(msg, 3),
    exp: jspb.Message.getField(msg, 4),
    level: jspb.Message.getField(msg, 5),
    authed: jspb.Message.getField(msg, 6),
    status: jspb.Message.getField(msg, 7),
    nickname: jspb.Message.getField(msg, 8),
    guard: jspb.Message.getField(msg, 9),
    rider: jspb.Message.getField(msg, 10),
    portrait: jspb.Message.getField(msg, 11),
    guardarrayList: jspb.Message.getField(msg, 12),
    honorowid: jspb.Message.getField(msg, 13),
    honorlevel: jspb.Message.getField(msg, 14),
    honorname: jspb.Message.getField(msg, 15),
    honorowisgray: jspb.Message.getField(msg, 16),
    no: jspb.Message.getField(msg, 17),
    notype: jspb.Message.getField(msg, 18)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.User;
  return proto.linkerProtocol.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVerified(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAuthed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuard(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRider(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortrait(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addGuardarray(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHonorowid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHonorlevel(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHonorname(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHonorowisgray(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNo(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNotype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getGuardarrayList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.User.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 gender = 2;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setGender = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.User.prototype.clearGender = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasGender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 verified = 3;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getVerified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setVerified = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.User.prototype.clearVerified = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasVerified = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 exp = 4;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getExp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setExp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.User.prototype.clearExp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasExp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 level = 5;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.User.prototype.clearLevel = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 authed = 6;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getAuthed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setAuthed = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.User.prototype.clearAuthed = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasAuthed = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 status = 7;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.User.prototype.clearStatus = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string nickname = 8;
 * @return {string}
 */
proto.linkerProtocol.User.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.linkerProtocol.User.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.User.prototype.clearNickname = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 guard = 9;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getGuard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setGuard = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.linkerProtocol.User.prototype.clearGuard = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasGuard = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 rider = 10;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getRider = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setRider = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.linkerProtocol.User.prototype.clearRider = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasRider = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string portrait = 11;
 * @return {string}
 */
proto.linkerProtocol.User.prototype.getPortrait = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.linkerProtocol.User.prototype.setPortrait = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.linkerProtocol.User.prototype.clearPortrait = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasPortrait = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string guardArray = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.linkerProtocol.User.prototype.getGuardarrayList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 12));
};


/** @param {!Array.<string>} value */
proto.linkerProtocol.User.prototype.setGuardarrayList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.linkerProtocol.User.prototype.addGuardarray = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.linkerProtocol.User.prototype.clearGuardarrayList = function() {
  this.setGuardarrayList([]);
};


/**
 * optional int32 honorOwid = 13;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getHonorowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setHonorowid = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.linkerProtocol.User.prototype.clearHonorowid = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasHonorowid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 honorLevel = 14;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getHonorlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setHonorlevel = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.linkerProtocol.User.prototype.clearHonorlevel = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasHonorlevel = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string honorName = 15;
 * @return {string}
 */
proto.linkerProtocol.User.prototype.getHonorname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.linkerProtocol.User.prototype.setHonorname = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.linkerProtocol.User.prototype.clearHonorname = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasHonorname = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool honorOwIsGray = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.linkerProtocol.User.prototype.getHonorowisgray = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.linkerProtocol.User.prototype.setHonorowisgray = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.linkerProtocol.User.prototype.clearHonorowisgray = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasHonorowisgray = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 no = 17;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getNo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setNo = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.linkerProtocol.User.prototype.clearNo = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasNo = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 noType = 18;
 * @return {number}
 */
proto.linkerProtocol.User.prototype.getNotype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.linkerProtocol.User.prototype.setNotype = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.linkerProtocol.User.prototype.clearNotype = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.User.prototype.hasNotype = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.AnchorLive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.AnchorLive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.AnchorLive.displayName = 'proto.linkerProtocol.AnchorLive';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.AnchorLive.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.AnchorLive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.AnchorLive} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.AnchorLive.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    nickname: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.AnchorLive}
 */
proto.linkerProtocol.AnchorLive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.AnchorLive;
  return proto.linkerProtocol.AnchorLive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.AnchorLive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.AnchorLive}
 */
proto.linkerProtocol.AnchorLive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.AnchorLive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.AnchorLive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.AnchorLive} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.AnchorLive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.AnchorLive.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.AnchorLive.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.AnchorLive.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorLive.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.linkerProtocol.AnchorLive.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.AnchorLive.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.AnchorLive.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorLive.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.linkerProtocol.AnchorLive.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.AnchorLive.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.AnchorLive.prototype.clearNickname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorLive.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LiveData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LiveData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LiveData.displayName = 'proto.linkerProtocol.LiveData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LiveData.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LiveData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LiveData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LiveData.toObject = function(includeInstance, msg) {
  var f, obj = {
    online: jspb.Message.getField(msg, 1),
    starlight: jspb.Message.getField(msg, 2),
    fight: jspb.Message.getField(msg, 3),
    status: jspb.Message.getField(msg, 4),
    views: jspb.Message.getField(msg, 5),
    duration: jspb.Message.getField(msg, 6),
    maxonline: jspb.Message.getField(msg, 7),
    isrectify: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LiveData}
 */
proto.linkerProtocol.LiveData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LiveData;
  return proto.linkerProtocol.LiveData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LiveData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LiveData}
 */
proto.linkerProtocol.LiveData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOnline(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarlight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViews(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxonline(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrectify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LiveData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LiveData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LiveData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LiveData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * required int32 online = 1;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getOnline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setOnline = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LiveData.prototype.clearOnline = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasOnline = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 starlight = 2;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getStarlight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setStarlight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LiveData.prototype.clearStarlight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasStarlight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 fight = 3;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getFight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setFight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.LiveData.prototype.clearFight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasFight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 status = 4;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.LiveData.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 views = 5;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getViews = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setViews = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.LiveData.prototype.clearViews = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasViews = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 duration = 6;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.LiveData.prototype.clearDuration = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 maxOnline = 7;
 * @return {number}
 */
proto.linkerProtocol.LiveData.prototype.getMaxonline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.linkerProtocol.LiveData.prototype.setMaxonline = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.LiveData.prototype.clearMaxonline = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasMaxonline = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool isRectify = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.linkerProtocol.LiveData.prototype.getIsrectify = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.linkerProtocol.LiveData.prototype.setIsrectify = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.LiveData.prototype.clearIsrectify = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LiveData.prototype.hasIsrectify = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomAttr.displayName = 'proto.linkerProtocol.RoomAttr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomAttr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    priv: jspb.Message.getField(msg, 1),
    guard: jspb.Message.getField(msg, 2),
    medal: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RoomAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomAttr;
  return proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriv(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuard(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMedal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomAttr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required uint32 priv = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomAttr.prototype.getPriv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomAttr.prototype.setPriv = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomAttr.prototype.clearPriv = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomAttr.prototype.hasPriv = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 guard = 2;
 * @return {number}
 */
proto.linkerProtocol.RoomAttr.prototype.getGuard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomAttr.prototype.setGuard = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.RoomAttr.prototype.clearGuard = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomAttr.prototype.hasGuard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 medal = 3;
 * @return {number}
 */
proto.linkerProtocol.RoomAttr.prototype.getMedal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomAttr.prototype.setMedal = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.RoomAttr.prototype.clearMedal = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomAttr.prototype.hasMedal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RetetionAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RetetionAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RetetionAttr.displayName = 'proto.linkerProtocol.RetetionAttr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RetetionAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RetetionAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RetetionAttr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RetetionAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    alivetime: jspb.Message.getField(msg, 1),
    nowtime: jspb.Message.getField(msg, 2),
    starttime: jspb.Message.getField(msg, 3),
    id: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RetetionAttr}
 */
proto.linkerProtocol.RetetionAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RetetionAttr;
  return proto.linkerProtocol.RetetionAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RetetionAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RetetionAttr}
 */
proto.linkerProtocol.RetetionAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlivetime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNowtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarttime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RetetionAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RetetionAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RetetionAttr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RetetionAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 aliveTime = 1;
 * @return {number}
 */
proto.linkerProtocol.RetetionAttr.prototype.getAlivetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RetetionAttr.prototype.setAlivetime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RetetionAttr.prototype.clearAlivetime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RetetionAttr.prototype.hasAlivetime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 nowTime = 2;
 * @return {number}
 */
proto.linkerProtocol.RetetionAttr.prototype.getNowtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.RetetionAttr.prototype.setNowtime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.RetetionAttr.prototype.clearNowtime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RetetionAttr.prototype.hasNowtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 startTime = 3;
 * @return {number}
 */
proto.linkerProtocol.RetetionAttr.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.RetetionAttr.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.RetetionAttr.prototype.clearStarttime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RetetionAttr.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 id = 4;
 * @return {number}
 */
proto.linkerProtocol.RetetionAttr.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.RetetionAttr.prototype.setId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.RetetionAttr.prototype.clearId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RetetionAttr.prototype.hasId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LoginReq.displayName = 'proto.linkerProtocol.LoginReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LoginReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    pwd: jspb.Message.getField(msg, 2),
    devid: jspb.Message.getField(msg, 3),
    app: jspb.Message.getField(msg, 4),
    rt: jspb.Message.getField(msg, 5),
    vk: jspb.Message.getField(msg, 6),
    ver: jspb.Message.getField(msg, 7),
    channel: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LoginReq}
 */
proto.linkerProtocol.LoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LoginReq;
  return proto.linkerProtocol.LoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LoginReq}
 */
proto.linkerProtocol.LoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPwd(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVk(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LoginReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.LoginReq.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LoginReq.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LoginReq.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string pwd = 2;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getPwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setPwd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LoginReq.prototype.clearPwd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasPwd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string devid = 3;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getDevid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setDevid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.LoginReq.prototype.clearDevid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasDevid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string app = 4;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getApp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setApp = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.LoginReq.prototype.clearApp = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasApp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 rt = 5;
 * @return {number}
 */
proto.linkerProtocol.LoginReq.prototype.getRt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.LoginReq.prototype.setRt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.LoginReq.prototype.clearRt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasRt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string vk = 6;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getVk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setVk = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.LoginReq.prototype.clearVk = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasVk = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string ver = 7;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getVer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setVer = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.LoginReq.prototype.clearVer = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasVer = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required string channel = 8;
 * @return {string}
 */
proto.linkerProtocol.LoginReq.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.linkerProtocol.LoginReq.prototype.setChannel = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.LoginReq.prototype.clearChannel = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginReq.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LoginResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LoginResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LoginResp.displayName = 'proto.linkerProtocol.LoginResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LoginResp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LoginResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LoginResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LoginResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LoginResp}
 */
proto.linkerProtocol.LoginResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LoginResp;
  return proto.linkerProtocol.LoginResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LoginResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LoginResp}
 */
proto.linkerProtocol.LoginResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LoginResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LoginResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LoginResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LoginResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 status = 1;
 * @return {number}
 */
proto.linkerProtocol.LoginResp.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LoginResp.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LoginResp.prototype.clearStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginResp.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 uid = 2;
 * @return {number}
 */
proto.linkerProtocol.LoginResp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LoginResp.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LoginResp.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LoginResp.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomJoinReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomJoinReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomJoinReq.displayName = 'proto.linkerProtocol.RoomJoinReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinReq.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomJoinReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomJoinReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomJoinReq}
 */
proto.linkerProtocol.RoomJoinReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomJoinReq;
  return proto.linkerProtocol.RoomJoinReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomJoinReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomJoinReq}
 */
proto.linkerProtocol.RoomJoinReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomJoinReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomJoinReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomJoinReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomJoinReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomJoinReq.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomJoinReq.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomJoinReq.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinReq.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomJoinResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.RoomJoinResp.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.RoomJoinResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomJoinResp.displayName = 'proto.linkerProtocol.RoomJoinResp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.RoomJoinResp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinResp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomJoinResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomJoinResp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    code: jspb.Message.getField(msg, 2),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    livedata: (f = msg.getLivedata()) && proto.linkerProtocol.LiveData.toObject(includeInstance, f),
    optionaltextcolorsList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomJoinResp}
 */
proto.linkerProtocol.RoomJoinResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomJoinResp;
  return proto.linkerProtocol.RoomJoinResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomJoinResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomJoinResp}
 */
proto.linkerProtocol.RoomJoinResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 4:
      var value = new proto.linkerProtocol.LiveData;
      reader.readMessage(value,proto.linkerProtocol.LiveData.deserializeBinaryFromReader);
      msg.setLivedata(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addOptionaltextcolors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomJoinResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomJoinResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomJoinResp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomJoinResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getLivedata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.linkerProtocol.LiveData.serializeBinaryToWriter
    );
  }
  f = message.getOptionaltextcolorsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      5,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomJoinResp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomJoinResp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomJoinResp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinResp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 code = 2;
 * @return {number}
 */
proto.linkerProtocol.RoomJoinResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomJoinResp.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.RoomJoinResp.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinResp.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RoomAttr roomAttr = 3;
 * @return {?proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RoomJoinResp.prototype.getRoomattr = function() {
  return /** @type{?proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 3));
};


/** @param {?proto.linkerProtocol.RoomAttr|undefined} value */
proto.linkerProtocol.RoomJoinResp.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.RoomJoinResp.prototype.clearRoomattr = function() {
  this.setRoomattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinResp.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LiveData liveData = 4;
 * @return {?proto.linkerProtocol.LiveData}
 */
proto.linkerProtocol.RoomJoinResp.prototype.getLivedata = function() {
  return /** @type{?proto.linkerProtocol.LiveData} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.LiveData, 4));
};


/** @param {?proto.linkerProtocol.LiveData|undefined} value */
proto.linkerProtocol.RoomJoinResp.prototype.setLivedata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.linkerProtocol.RoomJoinResp.prototype.clearLivedata = function() {
  this.setLivedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinResp.prototype.hasLivedata = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int32 optionalTextColors = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.linkerProtocol.RoomJoinResp.prototype.getOptionaltextcolorsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.linkerProtocol.RoomJoinResp.prototype.setOptionaltextcolorsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.linkerProtocol.RoomJoinResp.prototype.addOptionaltextcolors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.linkerProtocol.RoomJoinResp.prototype.clearOptionaltextcolorsList = function() {
  this.setOptionaltextcolorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomJoinNotifyUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomJoinNotifyUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomJoinNotifyUp.displayName = 'proto.linkerProtocol.RoomJoinNotifyUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinNotifyUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomJoinNotifyUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomJoinNotifyUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinNotifyUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomJoinNotifyUp}
 */
proto.linkerProtocol.RoomJoinNotifyUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomJoinNotifyUp;
  return proto.linkerProtocol.RoomJoinNotifyUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomJoinNotifyUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomJoinNotifyUp}
 */
proto.linkerProtocol.RoomJoinNotifyUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomJoinNotifyUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomJoinNotifyUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomJoinNotifyUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomJoinNotifyUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomJoinNotifyUp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomJoinNotifyUp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomJoinNotifyUp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinNotifyUp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomJoinNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomJoinNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomJoinNotify.displayName = 'proto.linkerProtocol.RoomJoinNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomJoinNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomJoinNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomJoinNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomJoinNotify}
 */
proto.linkerProtocol.RoomJoinNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomJoinNotify;
  return proto.linkerProtocol.RoomJoinNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomJoinNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomJoinNotify}
 */
proto.linkerProtocol.RoomJoinNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomJoinNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomJoinNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomJoinNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomJoinNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomJoinNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.RoomJoinNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.RoomJoinNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.RoomJoinNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.RoomJoinNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomJoinNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomLeaveReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomLeaveReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomLeaveReq.displayName = 'proto.linkerProtocol.RoomLeaveReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomLeaveReq.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomLeaveReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomLeaveReq} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomLeaveReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomLeaveReq}
 */
proto.linkerProtocol.RoomLeaveReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomLeaveReq;
  return proto.linkerProtocol.RoomLeaveReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomLeaveReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomLeaveReq}
 */
proto.linkerProtocol.RoomLeaveReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomLeaveReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomLeaveReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomLeaveReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomLeaveReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomLeaveReq.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomLeaveReq.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomLeaveReq.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomLeaveReq.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.ChatUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.ChatUp.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.ChatUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.ChatUp.displayName = 'proto.linkerProtocol.ChatUp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.ChatUp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.ChatUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.ChatUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.ChatUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.ChatUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    txt: jspb.Message.getField(msg, 2),
    tousersList: jspb.Message.toObjectList(msg.getTousersList(),
    proto.linkerProtocol.User.toObject, includeInstance),
    color: jspb.Message.getField(msg, 4),
    textattr: (f = msg.getTextattr()) && proto.linkerProtocol.TextAttribe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.ChatUp}
 */
proto.linkerProtocol.ChatUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.ChatUp;
  return proto.linkerProtocol.ChatUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.ChatUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.ChatUp}
 */
proto.linkerProtocol.ChatUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.addTousers(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 5:
      var value = new proto.linkerProtocol.TextAttribe;
      reader.readMessage(value,proto.linkerProtocol.TextAttribe.deserializeBinaryFromReader);
      msg.setTextattr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.ChatUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.ChatUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.ChatUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.ChatUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTousersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTextattr();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.linkerProtocol.TextAttribe.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.linkerProtocol.ChatUp.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.ChatUp.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.ChatUp.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatUp.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string txt = 2;
 * @return {string}
 */
proto.linkerProtocol.ChatUp.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.ChatUp.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.ChatUp.prototype.clearTxt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatUp.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated User toUsers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.User>}
 */
proto.linkerProtocol.ChatUp.prototype.getTousersList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.User, 3));
};


/** @param {!Array.<!proto.linkerProtocol.User>} value */
proto.linkerProtocol.ChatUp.prototype.setTousersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.linkerProtocol.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.ChatUp.prototype.addTousers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.linkerProtocol.User, opt_index);
};


proto.linkerProtocol.ChatUp.prototype.clearTousersList = function() {
  this.setTousersList([]);
};


/**
 * optional int32 color = 4;
 * @return {number}
 */
proto.linkerProtocol.ChatUp.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.ChatUp.prototype.setColor = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.ChatUp.prototype.clearColor = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatUp.prototype.hasColor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TextAttribe textAttr = 5;
 * @return {?proto.linkerProtocol.TextAttribe}
 */
proto.linkerProtocol.ChatUp.prototype.getTextattr = function() {
  return /** @type{?proto.linkerProtocol.TextAttribe} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.TextAttribe, 5));
};


/** @param {?proto.linkerProtocol.TextAttribe|undefined} value */
proto.linkerProtocol.ChatUp.prototype.setTextattr = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.linkerProtocol.ChatUp.prototype.clearTextattr = function() {
  this.setTextattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatUp.prototype.hasTextattr = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.ChatNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.ChatNotify.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.ChatNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.ChatNotify.displayName = 'proto.linkerProtocol.ChatNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.ChatNotify.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.ChatNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.ChatNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.ChatNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.ChatNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 4),
    txt: jspb.Message.getField(msg, 5),
    color: jspb.Message.getField(msg, 6),
    tousersList: jspb.Message.toObjectList(msg.getTousersList(),
    proto.linkerProtocol.User.toObject, includeInstance),
    retetionattr: (f = msg.getRetetionattr()) && proto.linkerProtocol.RetetionAttr.toObject(includeInstance, f),
    platform: jspb.Message.getField(msg, 9),
    textattr: (f = msg.getTextattr()) && proto.linkerProtocol.TextAttribe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.ChatNotify}
 */
proto.linkerProtocol.ChatNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.ChatNotify;
  return proto.linkerProtocol.ChatNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.ChatNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.ChatNotify}
 */
proto.linkerProtocol.ChatNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 7:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.addTousers(value);
      break;
    case 8:
      var value = new proto.linkerProtocol.RetetionAttr;
      reader.readMessage(value,proto.linkerProtocol.RetetionAttr.deserializeBinaryFromReader);
      msg.setRetetionattr(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 10:
      var value = new proto.linkerProtocol.TextAttribe;
      reader.readMessage(value,proto.linkerProtocol.TextAttribe.deserializeBinaryFromReader);
      msg.setTextattr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.ChatNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.ChatNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.ChatNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.ChatNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTousersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = message.getRetetionattr();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.linkerProtocol.RetetionAttr.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTextattr();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.linkerProtocol.TextAttribe.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.ChatNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.ChatNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.ChatNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.ChatNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.ChatNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.ChatNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 type = 4;
 * @return {number}
 */
proto.linkerProtocol.ChatNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.ChatNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string txt = 5;
 * @return {string}
 */
proto.linkerProtocol.ChatNotify.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.linkerProtocol.ChatNotify.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearTxt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 color = 6;
 * @return {number}
 */
proto.linkerProtocol.ChatNotify.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.ChatNotify.prototype.setColor = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearColor = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasColor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated User toUsers = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.User>}
 */
proto.linkerProtocol.ChatNotify.prototype.getTousersList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.User, 7));
};


/** @param {!Array.<!proto.linkerProtocol.User>} value */
proto.linkerProtocol.ChatNotify.prototype.setTousersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.linkerProtocol.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.ChatNotify.prototype.addTousers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.linkerProtocol.User, opt_index);
};


proto.linkerProtocol.ChatNotify.prototype.clearTousersList = function() {
  this.setTousersList([]);
};


/**
 * optional RetetionAttr retetionAttr = 8;
 * @return {?proto.linkerProtocol.RetetionAttr}
 */
proto.linkerProtocol.ChatNotify.prototype.getRetetionattr = function() {
  return /** @type{?proto.linkerProtocol.RetetionAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RetetionAttr, 8));
};


/** @param {?proto.linkerProtocol.RetetionAttr|undefined} value */
proto.linkerProtocol.ChatNotify.prototype.setRetetionattr = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearRetetionattr = function() {
  this.setRetetionattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasRetetionattr = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string platForm = 9;
 * @return {string}
 */
proto.linkerProtocol.ChatNotify.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.linkerProtocol.ChatNotify.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TextAttribe textAttr = 10;
 * @return {?proto.linkerProtocol.TextAttribe}
 */
proto.linkerProtocol.ChatNotify.prototype.getTextattr = function() {
  return /** @type{?proto.linkerProtocol.TextAttribe} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.TextAttribe, 10));
};


/** @param {?proto.linkerProtocol.TextAttribe|undefined} value */
proto.linkerProtocol.ChatNotify.prototype.setTextattr = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.linkerProtocol.ChatNotify.prototype.clearTextattr = function() {
  this.setTextattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ChatNotify.prototype.hasTextattr = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.TextAttribe = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.TextAttribe, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.TextAttribe.displayName = 'proto.linkerProtocol.TextAttribe';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.TextAttribe.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.TextAttribe.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.TextAttribe} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.TextAttribe.toObject = function(includeInstance, msg) {
  var f, obj = {
    font: jspb.Message.getField(msg, 1),
    fontsize: jspb.Message.getField(msg, 2),
    color: jspb.Message.getField(msg, 3),
    floatstyle: jspb.Message.getField(msg, 4),
    shading: jspb.Message.getField(msg, 5),
    paymethod: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.TextAttribe}
 */
proto.linkerProtocol.TextAttribe.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.TextAttribe;
  return proto.linkerProtocol.TextAttribe.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.TextAttribe} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.TextAttribe}
 */
proto.linkerProtocol.TextAttribe.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFont(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFontsize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFloatstyle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShading(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaymethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.TextAttribe.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.TextAttribe.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.TextAttribe} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.TextAttribe.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string font = 1;
 * @return {string}
 */
proto.linkerProtocol.TextAttribe.prototype.getFont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.linkerProtocol.TextAttribe.prototype.setFont = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearFont = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasFont = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 fontSize = 2;
 * @return {number}
 */
proto.linkerProtocol.TextAttribe.prototype.getFontsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.TextAttribe.prototype.setFontsize = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearFontsize = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasFontsize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 color = 3;
 * @return {number}
 */
proto.linkerProtocol.TextAttribe.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.TextAttribe.prototype.setColor = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearColor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 floatStyle = 4;
 * @return {number}
 */
proto.linkerProtocol.TextAttribe.prototype.getFloatstyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.TextAttribe.prototype.setFloatstyle = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearFloatstyle = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasFloatstyle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 shading = 5;
 * @return {number}
 */
proto.linkerProtocol.TextAttribe.prototype.getShading = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.TextAttribe.prototype.setShading = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearShading = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasShading = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 payMethod = 6;
 * @return {number}
 */
proto.linkerProtocol.TextAttribe.prototype.getPaymethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.TextAttribe.prototype.setPaymethod = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.TextAttribe.prototype.clearPaymethod = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.TextAttribe.prototype.hasPaymethod = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.BagUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.BagUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.BagUp.displayName = 'proto.linkerProtocol.BagUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.BagUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.BagUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.BagUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.BagUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    pid: jspb.Message.getField(msg, 2),
    count: jspb.Message.getField(msg, 3),
    ext: jspb.Message.getField(msg, 4),
    platform: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.BagUp}
 */
proto.linkerProtocol.BagUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.BagUp;
  return proto.linkerProtocol.BagUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.BagUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.BagUp}
 */
proto.linkerProtocol.BagUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.BagUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.BagUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.BagUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.BagUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.BagUp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagUp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.BagUp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagUp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 pid = 2;
 * @return {number}
 */
proto.linkerProtocol.BagUp.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagUp.prototype.setPid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.BagUp.prototype.clearPid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagUp.prototype.hasPid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.linkerProtocol.BagUp.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagUp.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.BagUp.prototype.clearCount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagUp.prototype.hasCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string ext = 4;
 * @return {string}
 */
proto.linkerProtocol.BagUp.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.BagUp.prototype.setExt = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.BagUp.prototype.clearExt = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagUp.prototype.hasExt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 platform = 5;
 * @return {number}
 */
proto.linkerProtocol.BagUp.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagUp.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.BagUp.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagUp.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.BagNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.BagNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.BagNotify.displayName = 'proto.linkerProtocol.BagNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.BagNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.BagNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.BagNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.BagNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    pid: jspb.Message.getField(msg, 3),
    num: jspb.Message.getField(msg, 4),
    expire: jspb.Message.getField(msg, 5),
    expirenum: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.BagNotify}
 */
proto.linkerProtocol.BagNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.BagNotify;
  return proto.linkerProtocol.BagNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.BagNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.BagNotify}
 */
proto.linkerProtocol.BagNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpire(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpirenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.BagNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.BagNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.BagNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.BagNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.BagNotify.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 action = 2;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.BagNotify.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 pid = 3;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setPid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.BagNotify.prototype.clearPid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasPid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 num = 4;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setNum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.BagNotify.prototype.clearNum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasNum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 expire = 5;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getExpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setExpire = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.BagNotify.prototype.clearExpire = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasExpire = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 expireNum = 6;
 * @return {number}
 */
proto.linkerProtocol.BagNotify.prototype.getExpirenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.BagNotify.prototype.setExpirenum = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.BagNotify.prototype.clearExpirenum = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BagNotify.prototype.hasExpirenum = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GiftUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GiftUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GiftUp.displayName = 'proto.linkerProtocol.GiftUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GiftUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GiftUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GiftUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GiftUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    gid: jspb.Message.getField(msg, 2),
    attrid: jspb.Message.getField(msg, 3),
    count: jspb.Message.getField(msg, 4),
    txt: jspb.Message.getField(msg, 5),
    ext: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GiftUp}
 */
proto.linkerProtocol.GiftUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GiftUp;
  return proto.linkerProtocol.GiftUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GiftUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GiftUp}
 */
proto.linkerProtocol.GiftUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttrid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GiftUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GiftUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GiftUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GiftUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.GiftUp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftUp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GiftUp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 gid = 2;
 * @return {number}
 */
proto.linkerProtocol.GiftUp.prototype.getGid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftUp.prototype.setGid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GiftUp.prototype.clearGid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasGid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 attrId = 3;
 * @return {number}
 */
proto.linkerProtocol.GiftUp.prototype.getAttrid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftUp.prototype.setAttrid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GiftUp.prototype.clearAttrid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasAttrid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 count = 4;
 * @return {number}
 */
proto.linkerProtocol.GiftUp.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftUp.prototype.setCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.GiftUp.prototype.clearCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string txt = 5;
 * @return {string}
 */
proto.linkerProtocol.GiftUp.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.linkerProtocol.GiftUp.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.GiftUp.prototype.clearTxt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string ext = 6;
 * @return {string}
 */
proto.linkerProtocol.GiftUp.prototype.getExt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.linkerProtocol.GiftUp.prototype.setExt = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.GiftUp.prototype.clearExt = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftUp.prototype.hasExt = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GiftNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GiftNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GiftNotify.displayName = 'proto.linkerProtocol.GiftNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GiftNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GiftNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GiftNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GiftNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    combo: jspb.Message.getField(msg, 4),
    comboid: jspb.Message.getField(msg, 5),
    gid: jspb.Message.getField(msg, 6),
    attrid: jspb.Message.getField(msg, 7),
    count: jspb.Message.getField(msg, 8),
    retetionattr: (f = msg.getRetetionattr()) && proto.linkerProtocol.RetetionAttr.toObject(includeInstance, f),
    luckymulti: jspb.Message.getField(msg, 10),
    consumetype: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GiftNotify}
 */
proto.linkerProtocol.GiftNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GiftNotify;
  return proto.linkerProtocol.GiftNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GiftNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GiftNotify}
 */
proto.linkerProtocol.GiftNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCombo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComboid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttrid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 9:
      var value = new proto.linkerProtocol.RetetionAttr;
      reader.readMessage(value,proto.linkerProtocol.RetetionAttr.deserializeBinaryFromReader);
      msg.setRetetionattr(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLuckymulti(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConsumetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GiftNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GiftNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GiftNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GiftNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getRetetionattr();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.linkerProtocol.RetetionAttr.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.GiftNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.GiftNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.GiftNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.GiftNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 combo = 4;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getCombo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setCombo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearCombo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasCombo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 comboId = 5;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getComboid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setComboid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearComboid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasComboid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 gid = 6;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getGid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setGid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearGid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasGid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 attrId = 7;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getAttrid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setAttrid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearAttrid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasAttrid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 count = 8;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setCount = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearCount = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RetetionAttr retetionAttr = 9;
 * @return {?proto.linkerProtocol.RetetionAttr}
 */
proto.linkerProtocol.GiftNotify.prototype.getRetetionattr = function() {
  return /** @type{?proto.linkerProtocol.RetetionAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RetetionAttr, 9));
};


/** @param {?proto.linkerProtocol.RetetionAttr|undefined} value */
proto.linkerProtocol.GiftNotify.prototype.setRetetionattr = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearRetetionattr = function() {
  this.setRetetionattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasRetetionattr = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 luckyMulti = 10;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getLuckymulti = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setLuckymulti = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearLuckymulti = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasLuckymulti = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 consumeType = 11;
 * @return {number}
 */
proto.linkerProtocol.GiftNotify.prototype.getConsumetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftNotify.prototype.setConsumetype = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.linkerProtocol.GiftNotify.prototype.clearConsumetype = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftNotify.prototype.hasConsumetype = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.ZanUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.ZanUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.ZanUp.displayName = 'proto.linkerProtocol.ZanUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.ZanUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.ZanUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.ZanUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.ZanUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    color: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.ZanUp}
 */
proto.linkerProtocol.ZanUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.ZanUp;
  return proto.linkerProtocol.ZanUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.ZanUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.ZanUp}
 */
proto.linkerProtocol.ZanUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.ZanUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.ZanUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.ZanUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.ZanUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.ZanUp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.ZanUp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.ZanUp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanUp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 color = 2;
 * @return {number}
 */
proto.linkerProtocol.ZanUp.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.ZanUp.prototype.setColor = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.ZanUp.prototype.clearColor = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanUp.prototype.hasColor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.ZanNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.ZanNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.ZanNotify.displayName = 'proto.linkerProtocol.ZanNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.ZanNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.ZanNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.ZanNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.ZanNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    color: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.ZanNotify}
 */
proto.linkerProtocol.ZanNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.ZanNotify;
  return proto.linkerProtocol.ZanNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.ZanNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.ZanNotify}
 */
proto.linkerProtocol.ZanNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.ZanNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.ZanNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.ZanNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.ZanNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.ZanNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.ZanNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.ZanNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.ZanNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.ZanNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.ZanNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.ZanNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.ZanNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.ZanNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 color = 4;
 * @return {number}
 */
proto.linkerProtocol.ZanNotify.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.ZanNotify.prototype.setColor = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.ZanNotify.prototype.clearColor = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ZanNotify.prototype.hasColor = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.ManagerNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.ManagerNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.ManagerNotify.displayName = 'proto.linkerProtocol.ManagerNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.ManagerNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.ManagerNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.ManagerNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.ManagerNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    status: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.ManagerNotify}
 */
proto.linkerProtocol.ManagerNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.ManagerNotify;
  return proto.linkerProtocol.ManagerNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.ManagerNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.ManagerNotify}
 */
proto.linkerProtocol.ManagerNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.ManagerNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.ManagerNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.ManagerNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.ManagerNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.ManagerNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.ManagerNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.ManagerNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ManagerNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.ManagerNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.ManagerNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.ManagerNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ManagerNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.ManagerNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.ManagerNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.ManagerNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ManagerNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 status = 4;
 * @return {number}
 */
proto.linkerProtocol.ManagerNotify.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.ManagerNotify.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.ManagerNotify.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.ManagerNotify.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomGuardNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomGuardNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomGuardNotify.displayName = 'proto.linkerProtocol.RoomGuardNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomGuardNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomGuardNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomGuardNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    uid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomGuardNotify}
 */
proto.linkerProtocol.RoomGuardNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomGuardNotify;
  return proto.linkerProtocol.RoomGuardNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomGuardNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomGuardNotify}
 */
proto.linkerProtocol.RoomGuardNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomGuardNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomGuardNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomGuardNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomGuardNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomGuardNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.RoomGuardNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.RoomGuardNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 uid = 3;
 * @return {number}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomGuardNotify.prototype.setUid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.RoomGuardNotify.prototype.clearUid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomGuardNotify.prototype.hasUid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RoomUpdateNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RoomUpdateNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RoomUpdateNotify.displayName = 'proto.linkerProtocol.RoomUpdateNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RoomUpdateNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RoomUpdateNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RoomUpdateNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    livedata: (f = msg.getLivedata()) && proto.linkerProtocol.LiveData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RoomUpdateNotify}
 */
proto.linkerProtocol.RoomUpdateNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RoomUpdateNotify;
  return proto.linkerProtocol.RoomUpdateNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RoomUpdateNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RoomUpdateNotify}
 */
proto.linkerProtocol.RoomUpdateNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.LiveData;
      reader.readMessage(value,proto.linkerProtocol.LiveData.deserializeBinaryFromReader);
      msg.setLivedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RoomUpdateNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RoomUpdateNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RoomUpdateNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLivedata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.LiveData.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RoomUpdateNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RoomUpdateNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required LiveData liveData = 2;
 * @return {!proto.linkerProtocol.LiveData}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.getLivedata = function() {
  return /** @type{!proto.linkerProtocol.LiveData} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.LiveData, 2, 1));
};


/** @param {!proto.linkerProtocol.LiveData} value */
proto.linkerProtocol.RoomUpdateNotify.prototype.setLivedata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.RoomUpdateNotify.prototype.clearLivedata = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RoomUpdateNotify.prototype.hasLivedata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.AnchorLiveStatusNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.AnchorLiveStatusNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.AnchorLiveStatusNotify.displayName = 'proto.linkerProtocol.AnchorLiveStatusNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.AnchorLiveStatusNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.AnchorLiveStatusNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.AnchorLiveStatusNotify}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.AnchorLiveStatusNotify;
  return proto.linkerProtocol.AnchorLiveStatusNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.AnchorLiveStatusNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.AnchorLiveStatusNotify}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.AnchorLiveStatusNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.AnchorLiveStatusNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.AnchorLiveStatusNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.AnchorLiveStatusNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 type = 2;
 * @return {number}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.AnchorLiveStatusNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorLiveStatusNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.SharedNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.SharedNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.SharedNotify.displayName = 'proto.linkerProtocol.SharedNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.SharedNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.SharedNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.SharedNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.SharedNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 4),
    tips: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.SharedNotify}
 */
proto.linkerProtocol.SharedNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.SharedNotify;
  return proto.linkerProtocol.SharedNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.SharedNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.SharedNotify}
 */
proto.linkerProtocol.SharedNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.SharedNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.SharedNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.SharedNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.SharedNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.SharedNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.SharedNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.SharedNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.SharedNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.SharedNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.SharedNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.SharedNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.SharedNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.SharedNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.SharedNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.SharedNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.SharedNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string type = 4;
 * @return {string}
 */
proto.linkerProtocol.SharedNotify.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.SharedNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.SharedNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.SharedNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string tips = 5;
 * @return {string}
 */
proto.linkerProtocol.SharedNotify.prototype.getTips = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.linkerProtocol.SharedNotify.prototype.setTips = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.SharedNotify.prototype.clearTips = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.SharedNotify.prototype.hasTips = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.FollowedNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.FollowedNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.FollowedNotify.displayName = 'proto.linkerProtocol.FollowedNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.FollowedNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.FollowedNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.FollowedNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.FollowedNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    tips: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.FollowedNotify}
 */
proto.linkerProtocol.FollowedNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.FollowedNotify;
  return proto.linkerProtocol.FollowedNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.FollowedNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.FollowedNotify}
 */
proto.linkerProtocol.FollowedNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.FollowedNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.FollowedNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.FollowedNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.FollowedNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.FollowedNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.FollowedNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.FollowedNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.FollowedNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.FollowedNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.FollowedNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.FollowedNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.FollowedNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.FollowedNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.FollowedNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.FollowedNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.FollowedNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string tips = 4;
 * @return {string}
 */
proto.linkerProtocol.FollowedNotify.prototype.getTips = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.FollowedNotify.prototype.setTips = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.FollowedNotify.prototype.clearTips = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.FollowedNotify.prototype.hasTips = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RedEnvelopeNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RedEnvelopeNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RedEnvelopeNotify.displayName = 'proto.linkerProtocol.RedEnvelopeNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RedEnvelopeNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RedEnvelopeNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RedEnvelopeNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    rid: jspb.Message.getField(msg, 4),
    type: jspb.Message.getField(msg, 5),
    amount: jspb.Message.getField(msg, 6),
    txt: jspb.Message.getField(msg, 7),
    retetionattr: (f = msg.getRetetionattr()) && proto.linkerProtocol.RetetionAttr.toObject(includeInstance, f),
    key: jspb.Message.getField(msg, 9),
    boxtype: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RedEnvelopeNotify}
 */
proto.linkerProtocol.RedEnvelopeNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RedEnvelopeNotify;
  return proto.linkerProtocol.RedEnvelopeNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RedEnvelopeNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RedEnvelopeNotify}
 */
proto.linkerProtocol.RedEnvelopeNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 8:
      var value = new proto.linkerProtocol.RetetionAttr;
      reader.readMessage(value,proto.linkerProtocol.RetetionAttr.deserializeBinaryFromReader);
      msg.setRetetionattr(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoxtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RedEnvelopeNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RedEnvelopeNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RedEnvelopeNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRetetionattr();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.linkerProtocol.RetetionAttr.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 rid = 4;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getRid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setRid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearRid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasRid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 type = 5;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 amount = 6;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearAmount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string txt = 7;
 * @return {string}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearTxt = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RetetionAttr retetionAttr = 8;
 * @return {?proto.linkerProtocol.RetetionAttr}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getRetetionattr = function() {
  return /** @type{?proto.linkerProtocol.RetetionAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RetetionAttr, 8));
};


/** @param {?proto.linkerProtocol.RetetionAttr|undefined} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setRetetionattr = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearRetetionattr = function() {
  this.setRetetionattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasRetetionattr = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required uint32 key = 9;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setKey = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearKey = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasKey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 boxType = 10;
 * @return {number}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.getBoxtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.linkerProtocol.RedEnvelopeNotify.prototype.setBoxtype = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.linkerProtocol.RedEnvelopeNotify.prototype.clearBoxtype = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RedEnvelopeNotify.prototype.hasBoxtype = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.UserAttrNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.UserAttrNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.UserAttrNotify.displayName = 'proto.linkerProtocol.UserAttrNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.UserAttrNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.UserAttrNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.UserAttrNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.UserAttrNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    diamond: jspb.Message.getField(msg, 2),
    starlight: jspb.Message.getField(msg, 3),
    fight: jspb.Message.getField(msg, 4),
    seed: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.UserAttrNotify}
 */
proto.linkerProtocol.UserAttrNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.UserAttrNotify;
  return proto.linkerProtocol.UserAttrNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.UserAttrNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.UserAttrNotify}
 */
proto.linkerProtocol.UserAttrNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiamond(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarlight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.UserAttrNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.UserAttrNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.UserAttrNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.UserAttrNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required User user = 1;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.UserAttrNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 1, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.UserAttrNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.linkerProtocol.UserAttrNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserAttrNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 diamond = 2;
 * @return {number}
 */
proto.linkerProtocol.UserAttrNotify.prototype.getDiamond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserAttrNotify.prototype.setDiamond = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.UserAttrNotify.prototype.clearDiamond = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserAttrNotify.prototype.hasDiamond = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 starlight = 3;
 * @return {number}
 */
proto.linkerProtocol.UserAttrNotify.prototype.getStarlight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserAttrNotify.prototype.setStarlight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.UserAttrNotify.prototype.clearStarlight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserAttrNotify.prototype.hasStarlight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 fight = 4;
 * @return {number}
 */
proto.linkerProtocol.UserAttrNotify.prototype.getFight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserAttrNotify.prototype.setFight = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.UserAttrNotify.prototype.clearFight = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserAttrNotify.prototype.hasFight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 seed = 5;
 * @return {number}
 */
proto.linkerProtocol.UserAttrNotify.prototype.getSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserAttrNotify.prototype.setSeed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.UserAttrNotify.prototype.clearSeed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserAttrNotify.prototype.hasSeed = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.UserLevelUpNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.UserLevelUpNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.UserLevelUpNotify.displayName = 'proto.linkerProtocol.UserLevelUpNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.UserLevelUpNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.UserLevelUpNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.UserLevelUpNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    nextlevel: jspb.Message.getField(msg, 4),
    needdiamod: jspb.Message.getField(msg, 5),
    percent: jspb.Message.getField(msg, 6),
    type: jspb.Message.getField(msg, 7),
    tips: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.UserLevelUpNotify}
 */
proto.linkerProtocol.UserLevelUpNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.UserLevelUpNotify;
  return proto.linkerProtocol.UserLevelUpNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.UserLevelUpNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.UserLevelUpNotify}
 */
proto.linkerProtocol.UserLevelUpNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNextlevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNeeddiamod(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPercent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTips(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.UserLevelUpNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.UserLevelUpNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.UserLevelUpNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required RoomAttr roomAttr = 2;
 * @return {!proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getRoomattr = function() {
  return /** @type{!proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 2, 1));
};


/** @param {!proto.linkerProtocol.RoomAttr} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearRoomattr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User user = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 nextLevel = 4;
 * @return {number}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getNextlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setNextlevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearNextlevel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasNextlevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 needDiamod = 5;
 * @return {number}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getNeeddiamod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setNeeddiamod = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearNeeddiamod = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasNeeddiamod = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 percent = 6;
 * @return {number}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getPercent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setPercent = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearPercent = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasPercent = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 type = 7;
 * @return {number}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string tips = 8;
 * @return {string}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.getTips = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.linkerProtocol.UserLevelUpNotify.prototype.setTips = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.UserLevelUpNotify.prototype.clearTips = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.UserLevelUpNotify.prototype.hasTips = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.KickoutNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.KickoutNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.KickoutNotify.displayName = 'proto.linkerProtocol.KickoutNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.KickoutNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.KickoutNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.KickoutNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.KickoutNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    msg: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.KickoutNotify}
 */
proto.linkerProtocol.KickoutNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.KickoutNotify;
  return proto.linkerProtocol.KickoutNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.KickoutNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.KickoutNotify}
 */
proto.linkerProtocol.KickoutNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.KickoutNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.KickoutNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.KickoutNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.KickoutNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.KickoutNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.KickoutNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.KickoutNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.KickoutNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.linkerProtocol.KickoutNotify.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.KickoutNotify.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.KickoutNotify.prototype.clearMsg = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.KickoutNotify.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkApply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LinkApply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkApply.displayName = 'proto.linkerProtocol.LinkApply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkApply.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkApply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkApply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkApply.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    applycount: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkApply}
 */
proto.linkerProtocol.LinkApply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkApply;
  return proto.linkerProtocol.LinkApply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkApply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkApply}
 */
proto.linkerProtocol.LinkApply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplycount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkApply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkApply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkApply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkApply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkApply.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkApply.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkApply.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkApply.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 uid = 2;
 * @return {number}
 */
proto.linkerProtocol.LinkApply.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkApply.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkApply.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkApply.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 applyCount = 3;
 * @return {number}
 */
proto.linkerProtocol.LinkApply.prototype.getApplycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkApply.prototype.setApplycount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.LinkApply.prototype.clearApplycount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkApply.prototype.hasApplycount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkCancel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LinkCancel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkCancel.displayName = 'proto.linkerProtocol.LinkCancel';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkCancel.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkCancel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkCancel} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkCancel.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    applycount: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkCancel}
 */
proto.linkerProtocol.LinkCancel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkCancel;
  return proto.linkerProtocol.LinkCancel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkCancel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkCancel}
 */
proto.linkerProtocol.LinkCancel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplycount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkCancel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkCancel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkCancel} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkCancel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkCancel.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkCancel.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkCancel.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkCancel.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 uid = 2;
 * @return {number}
 */
proto.linkerProtocol.LinkCancel.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkCancel.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkCancel.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkCancel.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 applyCount = 3;
 * @return {number}
 */
proto.linkerProtocol.LinkCancel.prototype.getApplycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkCancel.prototype.setApplycount = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.LinkCancel.prototype.clearApplycount = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkCancel.prototype.hasApplycount = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkClose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LinkClose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkClose.displayName = 'proto.linkerProtocol.LinkClose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkClose.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkClose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkClose} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkClose.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    applycount: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkClose}
 */
proto.linkerProtocol.LinkClose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkClose;
  return proto.linkerProtocol.LinkClose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkClose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkClose}
 */
proto.linkerProtocol.LinkClose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplycount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkClose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkClose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkClose} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkClose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkClose.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkClose.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkClose.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkClose.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 applyCount = 2;
 * @return {number}
 */
proto.linkerProtocol.LinkClose.prototype.getApplycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkClose.prototype.setApplycount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkClose.prototype.clearApplycount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkClose.prototype.hasApplycount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LinkNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkNotify.displayName = 'proto.linkerProtocol.LinkNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    applycount: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkNotify}
 */
proto.linkerProtocol.LinkNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkNotify;
  return proto.linkerProtocol.LinkNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkNotify}
 */
proto.linkerProtocol.LinkNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplycount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 applyCount = 2;
 * @return {number}
 */
proto.linkerProtocol.LinkNotify.prototype.getApplycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkNotify.prototype.setApplycount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkNotify.prototype.clearApplycount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkNotify.prototype.hasApplycount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkAccept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.LinkAccept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkAccept.displayName = 'proto.linkerProtocol.LinkAccept';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkAccept.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkAccept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkAccept} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkAccept.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    roomname: jspb.Message.getField(msg, 2),
    token: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkAccept}
 */
proto.linkerProtocol.LinkAccept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkAccept;
  return proto.linkerProtocol.LinkAccept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkAccept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkAccept}
 */
proto.linkerProtocol.LinkAccept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkAccept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkAccept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkAccept} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkAccept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkAccept.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkAccept.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkAccept.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkAccept.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string roomName = 2;
 * @return {string}
 */
proto.linkerProtocol.LinkAccept.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.LinkAccept.prototype.setRoomname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkAccept.prototype.clearRoomname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkAccept.prototype.hasRoomname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string token = 3;
 * @return {string}
 */
proto.linkerProtocol.LinkAccept.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.LinkAccept.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.LinkAccept.prototype.clearToken = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkAccept.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.LinkBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.LinkBroadcast.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.LinkBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.LinkBroadcast.displayName = 'proto.linkerProtocol.LinkBroadcast';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.LinkBroadcast.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.LinkBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.LinkBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.LinkBroadcast} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.LinkBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    linkersList: jspb.Message.toObjectList(msg.getLinkersList(),
    proto.linkerProtocol.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.LinkBroadcast}
 */
proto.linkerProtocol.LinkBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.LinkBroadcast;
  return proto.linkerProtocol.LinkBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.LinkBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.LinkBroadcast}
 */
proto.linkerProtocol.LinkBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.addLinkers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.LinkBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.LinkBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.LinkBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.LinkBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLinkersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.LinkBroadcast.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkBroadcast.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.LinkBroadcast.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkBroadcast.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 status = 2;
 * @return {number}
 */
proto.linkerProtocol.LinkBroadcast.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.LinkBroadcast.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.LinkBroadcast.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.LinkBroadcast.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated User linkers = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.User>}
 */
proto.linkerProtocol.LinkBroadcast.prototype.getLinkersList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.User, 3));
};


/** @param {!Array.<!proto.linkerProtocol.User>} value */
proto.linkerProtocol.LinkBroadcast.prototype.setLinkersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.linkerProtocol.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.LinkBroadcast.prototype.addLinkers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.linkerProtocol.User, opt_index);
};


proto.linkerProtocol.LinkBroadcast.prototype.clearLinkersList = function() {
  this.setLinkersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.BannerNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.BannerNotify.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.BannerNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.BannerNotify.displayName = 'proto.linkerProtocol.BannerNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.BannerNotify.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.BannerNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.BannerNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.BannerNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.BannerNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    anchor: (f = msg.getAnchor()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    templateid: jspb.Message.getField(msg, 4),
    gid: jspb.Message.getField(msg, 5),
    attrid: jspb.Message.getField(msg, 6),
    giftcount: jspb.Message.getField(msg, 7),
    txt: jspb.Message.getField(msg, 8),
    officialroom: (f = msg.getOfficialroom()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    landscape: jspb.Message.getField(msg, 10),
    luckymulti: jspb.Message.getField(msg, 11),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.linkerProtocol.MapEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.BannerNotify}
 */
proto.linkerProtocol.BannerNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.BannerNotify;
  return proto.linkerProtocol.BannerNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.BannerNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.BannerNotify}
 */
proto.linkerProtocol.BannerNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setAnchor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttrid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGiftcount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 9:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setOfficialroom(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLandscape(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLuckymulti(value);
      break;
    case 12:
      var value = new proto.linkerProtocol.MapEntry;
      reader.readMessage(value,proto.linkerProtocol.MapEntry.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.BannerNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.BannerNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.BannerNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.BannerNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = message.getAnchor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOfficialroom();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.linkerProtocol.MapEntry.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required User user = 2;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.BannerNotify.prototype.getUser = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 2, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.BannerNotify.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearUser = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required User anchor = 3;
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.BannerNotify.prototype.getAnchor = function() {
  return /** @type{!proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3, 1));
};


/** @param {!proto.linkerProtocol.User} value */
proto.linkerProtocol.BannerNotify.prototype.setAnchor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearAnchor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasAnchor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 templateId = 4;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getTemplateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setTemplateid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearTemplateid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasTemplateid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 gid = 5;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getGid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setGid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearGid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasGid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 attrId = 6;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getAttrid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setAttrid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearAttrid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasAttrid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 giftCount = 7;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getGiftcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setGiftcount = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearGiftcount = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasGiftcount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string txt = 8;
 * @return {string}
 */
proto.linkerProtocol.BannerNotify.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.linkerProtocol.BannerNotify.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearTxt = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional User officialRoom = 9;
 * @return {?proto.linkerProtocol.User}
 */
proto.linkerProtocol.BannerNotify.prototype.getOfficialroom = function() {
  return /** @type{?proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 9));
};


/** @param {?proto.linkerProtocol.User|undefined} value */
proto.linkerProtocol.BannerNotify.prototype.setOfficialroom = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearOfficialroom = function() {
  this.setOfficialroom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasOfficialroom = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 landscape = 10;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getLandscape = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setLandscape = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearLandscape = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasLandscape = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 luckyMulti = 11;
 * @return {number}
 */
proto.linkerProtocol.BannerNotify.prototype.getLuckymulti = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.linkerProtocol.BannerNotify.prototype.setLuckymulti = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.linkerProtocol.BannerNotify.prototype.clearLuckymulti = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.BannerNotify.prototype.hasLuckymulti = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated MapEntry params = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.MapEntry>}
 */
proto.linkerProtocol.BannerNotify.prototype.getParamsList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.MapEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.MapEntry, 12));
};


/** @param {!Array.<!proto.linkerProtocol.MapEntry>} value */
proto.linkerProtocol.BannerNotify.prototype.setParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.linkerProtocol.MapEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.MapEntry}
 */
proto.linkerProtocol.BannerNotify.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.linkerProtocol.MapEntry, opt_index);
};


proto.linkerProtocol.BannerNotify.prototype.clearParamsList = function() {
  this.setParamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.OfficialLiveStatusNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.OfficialLiveStatusNotify.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.OfficialLiveStatusNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.OfficialLiveStatusNotify.displayName = 'proto.linkerProtocol.OfficialLiveStatusNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.OfficialLiveStatusNotify.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.OfficialLiveStatusNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.OfficialLiveStatusNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    anchorlistList: jspb.Message.toObjectList(msg.getAnchorlistList(),
    proto.linkerProtocol.User.toObject, includeInstance),
    currentanchor: (f = msg.getCurrentanchor()) && proto.linkerProtocol.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.OfficialLiveStatusNotify}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.OfficialLiveStatusNotify;
  return proto.linkerProtocol.OfficialLiveStatusNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.OfficialLiveStatusNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.OfficialLiveStatusNotify}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.addAnchorlist(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setCurrentanchor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.OfficialLiveStatusNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.OfficialLiveStatusNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.OfficialLiveStatusNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnchorlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = message.getCurrentanchor();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.OfficialLiveStatusNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated User anchorList = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.User>}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.getAnchorlistList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.User, 2));
};


/** @param {!Array.<!proto.linkerProtocol.User>} value */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.setAnchorlistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.linkerProtocol.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.User}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.addAnchorlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.linkerProtocol.User, opt_index);
};


proto.linkerProtocol.OfficialLiveStatusNotify.prototype.clearAnchorlistList = function() {
  this.setAnchorlistList([]);
};


/**
 * optional User currentAnchor = 3;
 * @return {?proto.linkerProtocol.User}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.getCurrentanchor = function() {
  return /** @type{?proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 3));
};


/** @param {?proto.linkerProtocol.User|undefined} value */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.setCurrentanchor = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.linkerProtocol.OfficialLiveStatusNotify.prototype.clearCurrentanchor = function() {
  this.setCurrentanchor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveStatusNotify.prototype.hasCurrentanchor = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.OfficialLiveLikeUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.OfficialLiveLikeUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.OfficialLiveLikeUp.displayName = 'proto.linkerProtocol.OfficialLiveLikeUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.OfficialLiveLikeUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.OfficialLiveLikeUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveLikeUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.OfficialLiveLikeUp}
 */
proto.linkerProtocol.OfficialLiveLikeUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.OfficialLiveLikeUp;
  return proto.linkerProtocol.OfficialLiveLikeUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.OfficialLiveLikeUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.OfficialLiveLikeUp}
 */
proto.linkerProtocol.OfficialLiveLikeUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.OfficialLiveLikeUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.OfficialLiveLikeUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.OfficialLiveLikeUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.OfficialLiveLikeUp.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 action = 2;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.OfficialLiveLikeUp.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeUp.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.OfficialLiveLikeNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.OfficialLiveLikeNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.OfficialLiveLikeNotify.displayName = 'proto.linkerProtocol.OfficialLiveLikeNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.OfficialLiveLikeNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.OfficialLiveLikeNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    remainingtime: jspb.Message.getField(msg, 2),
    like: jspb.Message.getField(msg, 3),
    unlike: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.OfficialLiveLikeNotify}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.OfficialLiveLikeNotify;
  return proto.linkerProtocol.OfficialLiveLikeNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.OfficialLiveLikeNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.OfficialLiveLikeNotify}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemainingtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLike(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnlike(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.OfficialLiveLikeNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.OfficialLiveLikeNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.OfficialLiveLikeNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.OfficialLiveLikeNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 remainingTime = 2;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.getRemainingtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.setRemainingtime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.OfficialLiveLikeNotify.prototype.clearRemainingtime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.hasRemainingtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 like = 3;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.getLike = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.setLike = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.OfficialLiveLikeNotify.prototype.clearLike = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.hasLike = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 unlike = 4;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.getUnlike = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.setUnlike = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.OfficialLiveLikeNotify.prototype.clearUnlike = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveLikeNotify.prototype.hasUnlike = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.OfficialLiveNavigationChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.OfficialLiveNavigationChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.OfficialLiveNavigationChange.displayName = 'proto.linkerProtocol.OfficialLiveNavigationChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.OfficialLiveNavigationChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.OfficialLiveNavigationChange} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcowid: jspb.Message.getField(msg, 1),
    destowid: jspb.Message.getField(msg, 2),
    streamurl: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.OfficialLiveNavigationChange}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.OfficialLiveNavigationChange;
  return proto.linkerProtocol.OfficialLiveNavigationChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.OfficialLiveNavigationChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.OfficialLiveNavigationChange}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSrcowid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDestowid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreamurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.OfficialLiveNavigationChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.OfficialLiveNavigationChange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.OfficialLiveNavigationChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 srcOwid = 1;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.getSrcowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.setSrcowid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.OfficialLiveNavigationChange.prototype.clearSrcowid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.hasSrcowid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 destOwid = 2;
 * @return {number}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.getDestowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.setDestowid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.OfficialLiveNavigationChange.prototype.clearDestowid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.hasDestowid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string streamUrl = 3;
 * @return {string}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.getStreamurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.setStreamurl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.OfficialLiveNavigationChange.prototype.clearStreamurl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.OfficialLiveNavigationChange.prototype.hasStreamurl = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.AnchorIndicateNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.AnchorIndicateNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.AnchorIndicateNotify.displayName = 'proto.linkerProtocol.AnchorIndicateNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.AnchorIndicateNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.AnchorIndicateNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.AnchorIndicateNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getField(msg, 1),
    txt: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.AnchorIndicateNotify}
 */
proto.linkerProtocol.AnchorIndicateNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.AnchorIndicateNotify;
  return proto.linkerProtocol.AnchorIndicateNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.AnchorIndicateNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.AnchorIndicateNotify}
 */
proto.linkerProtocol.AnchorIndicateNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.AnchorIndicateNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.AnchorIndicateNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.AnchorIndicateNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 action = 1;
 * @return {number}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.AnchorIndicateNotify.prototype.setAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.AnchorIndicateNotify.prototype.clearAction = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string txt = 2;
 * @return {string}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.AnchorIndicateNotify.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.AnchorIndicateNotify.prototype.clearTxt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.AnchorIndicateNotify.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GlobalMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.GlobalMsg.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.GlobalMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GlobalMsg.displayName = 'proto.linkerProtocol.GlobalMsg';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.GlobalMsg.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GlobalMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GlobalMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GlobalMsg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GlobalMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    extList: jspb.Message.toObjectList(msg.getExtList(),
    proto.linkerProtocol.Ext.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GlobalMsg}
 */
proto.linkerProtocol.GlobalMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GlobalMsg;
  return proto.linkerProtocol.GlobalMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GlobalMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GlobalMsg}
 */
proto.linkerProtocol.GlobalMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.Ext;
      reader.readMessage(value,proto.linkerProtocol.Ext.deserializeBinaryFromReader);
      msg.addExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GlobalMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GlobalMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GlobalMsg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GlobalMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExtList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.linkerProtocol.Ext.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.linkerProtocol.GlobalMsg.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GlobalMsg.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GlobalMsg.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GlobalMsg.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Ext ext = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.Ext>}
 */
proto.linkerProtocol.GlobalMsg.prototype.getExtList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.Ext>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.Ext, 2));
};


/** @param {!Array.<!proto.linkerProtocol.Ext>} value */
proto.linkerProtocol.GlobalMsg.prototype.setExtList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.linkerProtocol.Ext=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.Ext}
 */
proto.linkerProtocol.GlobalMsg.prototype.addExt = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.linkerProtocol.Ext, opt_index);
};


proto.linkerProtocol.GlobalMsg.prototype.clearExtList = function() {
  this.setExtList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.Ext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.Ext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.Ext.displayName = 'proto.linkerProtocol.Ext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.Ext.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.Ext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.Ext} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.Ext.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.linkerProtocol.User.toObject(includeInstance, f),
    txt: jspb.Message.getField(msg, 2),
    color: jspb.Message.getField(msg, 3),
    roomattr: (f = msg.getRoomattr()) && proto.linkerProtocol.RoomAttr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.Ext}
 */
proto.linkerProtocol.Ext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.Ext;
  return proto.linkerProtocol.Ext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.Ext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.Ext}
 */
proto.linkerProtocol.Ext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.linkerProtocol.User;
      reader.readMessage(value,proto.linkerProtocol.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColor(value);
      break;
    case 4:
      var value = new proto.linkerProtocol.RoomAttr;
      reader.readMessage(value,proto.linkerProtocol.RoomAttr.deserializeBinaryFromReader);
      msg.setRoomattr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.Ext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.Ext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.Ext} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.Ext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.linkerProtocol.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRoomattr();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.linkerProtocol.RoomAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.linkerProtocol.User}
 */
proto.linkerProtocol.Ext.prototype.getUser = function() {
  return /** @type{?proto.linkerProtocol.User} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.User, 1));
};


/** @param {?proto.linkerProtocol.User|undefined} value */
proto.linkerProtocol.Ext.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.linkerProtocol.Ext.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.Ext.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string txt = 2;
 * @return {string}
 */
proto.linkerProtocol.Ext.prototype.getTxt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.Ext.prototype.setTxt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.Ext.prototype.clearTxt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.Ext.prototype.hasTxt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 color = 3;
 * @return {number}
 */
proto.linkerProtocol.Ext.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.Ext.prototype.setColor = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.Ext.prototype.clearColor = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.Ext.prototype.hasColor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RoomAttr roomAttr = 4;
 * @return {?proto.linkerProtocol.RoomAttr}
 */
proto.linkerProtocol.Ext.prototype.getRoomattr = function() {
  return /** @type{?proto.linkerProtocol.RoomAttr} */ (
    jspb.Message.getWrapperField(this, proto.linkerProtocol.RoomAttr, 4));
};


/** @param {?proto.linkerProtocol.RoomAttr|undefined} value */
proto.linkerProtocol.Ext.prototype.setRoomattr = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.linkerProtocol.Ext.prototype.clearRoomattr = function() {
  this.setRoomattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.Ext.prototype.hasRoomattr = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GiftboxDone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GiftboxDone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GiftboxDone.displayName = 'proto.linkerProtocol.GiftboxDone';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GiftboxDone.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GiftboxDone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GiftboxDone} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GiftboxDone.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    boxid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GiftboxDone}
 */
proto.linkerProtocol.GiftboxDone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GiftboxDone;
  return proto.linkerProtocol.GiftboxDone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GiftboxDone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GiftboxDone}
 */
proto.linkerProtocol.GiftboxDone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GiftboxDone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GiftboxDone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GiftboxDone} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GiftboxDone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.GiftboxDone.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftboxDone.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GiftboxDone.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftboxDone.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 type = 2;
 * @return {number}
 */
proto.linkerProtocol.GiftboxDone.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftboxDone.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GiftboxDone.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftboxDone.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 boxid = 3;
 * @return {number}
 */
proto.linkerProtocol.GiftboxDone.prototype.getBoxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.GiftboxDone.prototype.setBoxid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GiftboxDone.prototype.clearBoxid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GiftboxDone.prototype.hasBoxid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.DialogNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.DialogNotify.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.DialogNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.DialogNotify.displayName = 'proto.linkerProtocol.DialogNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.DialogNotify.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.DialogNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.DialogNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.DialogNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.DialogNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2),
    content: jspb.Message.getField(msg, 3),
    buttonsList: jspb.Message.toObjectList(msg.getButtonsList(),
    proto.linkerProtocol.DialogButton.toObject, includeInstance),
    paramentriesList: jspb.Message.toObjectList(msg.getParamentriesList(),
    proto.linkerProtocol.MapEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.DialogNotify}
 */
proto.linkerProtocol.DialogNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.DialogNotify;
  return proto.linkerProtocol.DialogNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.DialogNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.DialogNotify}
 */
proto.linkerProtocol.DialogNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 4:
      var value = new proto.linkerProtocol.DialogButton;
      reader.readMessage(value,proto.linkerProtocol.DialogButton.deserializeBinaryFromReader);
      msg.addButtons(value);
      break;
    case 5:
      var value = new proto.linkerProtocol.MapEntry;
      reader.readMessage(value,proto.linkerProtocol.MapEntry.deserializeBinaryFromReader);
      msg.addParamentries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.DialogNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.DialogNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.DialogNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.DialogNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getButtonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.linkerProtocol.DialogButton.serializeBinaryToWriter
    );
  }
  f = message.getParamentriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.linkerProtocol.MapEntry.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.linkerProtocol.DialogNotify.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.DialogNotify.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.DialogNotify.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogNotify.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string title = 2;
 * @return {string}
 */
proto.linkerProtocol.DialogNotify.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.DialogNotify.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.DialogNotify.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogNotify.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string content = 3;
 * @return {string}
 */
proto.linkerProtocol.DialogNotify.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.DialogNotify.prototype.setContent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.DialogNotify.prototype.clearContent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogNotify.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated DialogButton buttons = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.DialogButton>}
 */
proto.linkerProtocol.DialogNotify.prototype.getButtonsList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.DialogButton>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.DialogButton, 4));
};


/** @param {!Array.<!proto.linkerProtocol.DialogButton>} value */
proto.linkerProtocol.DialogNotify.prototype.setButtonsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.linkerProtocol.DialogButton=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.DialogButton}
 */
proto.linkerProtocol.DialogNotify.prototype.addButtons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.linkerProtocol.DialogButton, opt_index);
};


proto.linkerProtocol.DialogNotify.prototype.clearButtonsList = function() {
  this.setButtonsList([]);
};


/**
 * repeated MapEntry paramEntries = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.MapEntry>}
 */
proto.linkerProtocol.DialogNotify.prototype.getParamentriesList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.MapEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.MapEntry, 5));
};


/** @param {!Array.<!proto.linkerProtocol.MapEntry>} value */
proto.linkerProtocol.DialogNotify.prototype.setParamentriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.linkerProtocol.MapEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.MapEntry}
 */
proto.linkerProtocol.DialogNotify.prototype.addParamentries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.linkerProtocol.MapEntry, opt_index);
};


proto.linkerProtocol.DialogNotify.prototype.clearParamentriesList = function() {
  this.setParamentriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.DialogButton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.DialogButton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.DialogButton.displayName = 'proto.linkerProtocol.DialogButton';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.DialogButton.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.DialogButton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.DialogButton} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.DialogButton.toObject = function(includeInstance, msg) {
  var f, obj = {
    button: jspb.Message.getField(msg, 1),
    url: jspb.Message.getField(msg, 2),
    action: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.DialogButton}
 */
proto.linkerProtocol.DialogButton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.DialogButton;
  return proto.linkerProtocol.DialogButton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.DialogButton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.DialogButton}
 */
proto.linkerProtocol.DialogButton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setButton(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.DialogButton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.DialogButton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.DialogButton} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.DialogButton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string button = 1;
 * @return {string}
 */
proto.linkerProtocol.DialogButton.prototype.getButton = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.linkerProtocol.DialogButton.prototype.setButton = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.DialogButton.prototype.clearButton = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogButton.prototype.hasButton = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.linkerProtocol.DialogButton.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.DialogButton.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.DialogButton.prototype.clearUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogButton.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 action = 3;
 * @return {number}
 */
proto.linkerProtocol.DialogButton.prototype.getAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.DialogButton.prototype.setAction = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.DialogButton.prototype.clearAction = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.DialogButton.prototype.hasAction = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.MapEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.MapEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.MapEntry.displayName = 'proto.linkerProtocol.MapEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.MapEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.MapEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.MapEntry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.MapEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.MapEntry}
 */
proto.linkerProtocol.MapEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.MapEntry;
  return proto.linkerProtocol.MapEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.MapEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.MapEntry}
 */
proto.linkerProtocol.MapEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.MapEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.MapEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.MapEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.MapEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.linkerProtocol.MapEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.linkerProtocol.MapEntry.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.MapEntry.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.MapEntry.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.linkerProtocol.MapEntry.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.MapEntry.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.MapEntry.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.MapEntry.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.GuessUpdate.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.GuessUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessUpdate.displayName = 'proto.linkerProtocol.GuessUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.GuessUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    subjectsList: jspb.Message.toObjectList(msg.getSubjectsList(),
    proto.linkerProtocol.GuessSubject.toObject, includeInstance),
    nowtime: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessUpdate}
 */
proto.linkerProtocol.GuessUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessUpdate;
  return proto.linkerProtocol.GuessUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessUpdate}
 */
proto.linkerProtocol.GuessUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = new proto.linkerProtocol.GuessSubject;
      reader.readMessage(value,proto.linkerProtocol.GuessSubject.deserializeBinaryFromReader);
      msg.addSubjects(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNowtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSubjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.linkerProtocol.GuessSubject.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.GuessUpdate.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessUpdate.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessUpdate.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessUpdate.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated GuessSubject subjects = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.GuessSubject>}
 */
proto.linkerProtocol.GuessUpdate.prototype.getSubjectsList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.GuessSubject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.GuessSubject, 2));
};


/** @param {!Array.<!proto.linkerProtocol.GuessSubject>} value */
proto.linkerProtocol.GuessUpdate.prototype.setSubjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.linkerProtocol.GuessSubject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.GuessSubject}
 */
proto.linkerProtocol.GuessUpdate.prototype.addSubjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.linkerProtocol.GuessSubject, opt_index);
};


proto.linkerProtocol.GuessUpdate.prototype.clearSubjectsList = function() {
  this.setSubjectsList([]);
};


/**
 * required int32 nowTime = 3;
 * @return {number}
 */
proto.linkerProtocol.GuessUpdate.prototype.getNowtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessUpdate.prototype.setNowtime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GuessUpdate.prototype.clearNowtime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessUpdate.prototype.hasNowtime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessSubject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.GuessSubject.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.GuessSubject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessSubject.displayName = 'proto.linkerProtocol.GuessSubject';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.GuessSubject.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessSubject.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessSubject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessSubject} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessSubject.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessid: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    reason: jspb.Message.getField(msg, 4),
    endtime: jspb.Message.getField(msg, 5),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.linkerProtocol.GuessItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessSubject}
 */
proto.linkerProtocol.GuessSubject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessSubject;
  return proto.linkerProtocol.GuessSubject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessSubject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessSubject}
 */
proto.linkerProtocol.GuessSubject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuessid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndtime(value);
      break;
    case 6:
      var value = new proto.linkerProtocol.GuessItem;
      reader.readMessage(value,proto.linkerProtocol.GuessItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessSubject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessSubject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessSubject} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessSubject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.linkerProtocol.GuessItem.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 guessID = 1;
 * @return {number}
 */
proto.linkerProtocol.GuessSubject.prototype.getGuessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessSubject.prototype.setGuessid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessSubject.prototype.clearGuessid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessSubject.prototype.hasGuessid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string title = 2;
 * @return {string}
 */
proto.linkerProtocol.GuessSubject.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessSubject.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GuessSubject.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessSubject.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 status = 3;
 * @return {number}
 */
proto.linkerProtocol.GuessSubject.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessSubject.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GuessSubject.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessSubject.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string reason = 4;
 * @return {string}
 */
proto.linkerProtocol.GuessSubject.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessSubject.prototype.setReason = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.GuessSubject.prototype.clearReason = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessSubject.prototype.hasReason = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 endTime = 5;
 * @return {number}
 */
proto.linkerProtocol.GuessSubject.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessSubject.prototype.setEndtime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.GuessSubject.prototype.clearEndtime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessSubject.prototype.hasEndtime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated GuessItem items = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.GuessItem>}
 */
proto.linkerProtocol.GuessSubject.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.GuessItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.GuessItem, 6));
};


/** @param {!Array.<!proto.linkerProtocol.GuessItem>} value */
proto.linkerProtocol.GuessSubject.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.linkerProtocol.GuessItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.GuessItem}
 */
proto.linkerProtocol.GuessSubject.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.linkerProtocol.GuessItem, opt_index);
};


proto.linkerProtocol.GuessSubject.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GuessItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessItem.displayName = 'proto.linkerProtocol.GuessItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessItem.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    desc: jspb.Message.getField(msg, 1),
    odd: +jspb.Message.getField(msg, 2),
    stake: jspb.Message.getField(msg, 3),
    balance: jspb.Message.getField(msg, 4),
    itemid: jspb.Message.getField(msg, 5),
    iswin: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessItem}
 */
proto.linkerProtocol.GuessItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessItem;
  return proto.linkerProtocol.GuessItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessItem}
 */
proto.linkerProtocol.GuessItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOdd(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStake(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBalance(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemid(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * required string desc = 1;
 * @return {string}
 */
proto.linkerProtocol.GuessItem.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessItem.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessItem.prototype.clearDesc = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float odd = 2;
 * @return {number}
 */
proto.linkerProtocol.GuessItem.prototype.getOdd = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.linkerProtocol.GuessItem.prototype.setOdd = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GuessItem.prototype.clearOdd = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasOdd = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 stake = 3;
 * @return {number}
 */
proto.linkerProtocol.GuessItem.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessItem.prototype.setStake = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GuessItem.prototype.clearStake = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasStake = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 balance = 4;
 * @return {number}
 */
proto.linkerProtocol.GuessItem.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessItem.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.GuessItem.prototype.clearBalance = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 itemID = 5;
 * @return {number}
 */
proto.linkerProtocol.GuessItem.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessItem.prototype.setItemid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.GuessItem.prototype.clearItemid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasItemid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool isWin = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.linkerProtocol.GuessItem.prototype.getIswin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.linkerProtocol.GuessItem.prototype.setIswin = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.GuessItem.prototype.clearIswin = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessItem.prototype.hasIswin = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessWin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.linkerProtocol.GuessWin.repeatedFields_, null);
};
goog.inherits(proto.linkerProtocol.GuessWin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessWin.displayName = 'proto.linkerProtocol.GuessWin';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.linkerProtocol.GuessWin.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessWin.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessWin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessWin} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessWin.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    owid: jspb.Message.getField(msg, 2),
    awardsList: jspb.Message.toObjectList(msg.getAwardsList(),
    proto.linkerProtocol.GuessAward.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessWin}
 */
proto.linkerProtocol.GuessWin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessWin;
  return proto.linkerProtocol.GuessWin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessWin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessWin}
 */
proto.linkerProtocol.GuessWin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 3:
      var value = new proto.linkerProtocol.GuessAward;
      reader.readMessage(value,proto.linkerProtocol.GuessAward.deserializeBinaryFromReader);
      msg.addAwards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessWin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessWin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessWin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessWin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAwardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.linkerProtocol.GuessAward.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.GuessWin.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessWin.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessWin.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessWin.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 owid = 2;
 * @return {number}
 */
proto.linkerProtocol.GuessWin.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessWin.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GuessWin.prototype.clearOwid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessWin.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated GuessAward awards = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.linkerProtocol.GuessAward>}
 */
proto.linkerProtocol.GuessWin.prototype.getAwardsList = function() {
  return /** @type{!Array.<!proto.linkerProtocol.GuessAward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.linkerProtocol.GuessAward, 3));
};


/** @param {!Array.<!proto.linkerProtocol.GuessAward>} value */
proto.linkerProtocol.GuessWin.prototype.setAwardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.linkerProtocol.GuessAward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.linkerProtocol.GuessAward}
 */
proto.linkerProtocol.GuessWin.prototype.addAwards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.linkerProtocol.GuessAward, opt_index);
};


proto.linkerProtocol.GuessWin.prototype.clearAwardsList = function() {
  this.setAwardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessAward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GuessAward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessAward.displayName = 'proto.linkerProtocol.GuessAward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessAward.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessAward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessAward} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessAward.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessid: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2),
    desc: jspb.Message.getField(msg, 3),
    award: jspb.Message.getField(msg, 4),
    status: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessAward}
 */
proto.linkerProtocol.GuessAward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessAward;
  return proto.linkerProtocol.GuessAward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessAward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessAward}
 */
proto.linkerProtocol.GuessAward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuessid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAward(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessAward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessAward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessAward} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessAward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 guessID = 1;
 * @return {number}
 */
proto.linkerProtocol.GuessAward.prototype.getGuessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessAward.prototype.setGuessid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessAward.prototype.clearGuessid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessAward.prototype.hasGuessid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string title = 2;
 * @return {string}
 */
proto.linkerProtocol.GuessAward.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessAward.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GuessAward.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessAward.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string desc = 3;
 * @return {string}
 */
proto.linkerProtocol.GuessAward.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessAward.prototype.setDesc = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GuessAward.prototype.clearDesc = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessAward.prototype.hasDesc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 award = 4;
 * @return {number}
 */
proto.linkerProtocol.GuessAward.prototype.getAward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessAward.prototype.setAward = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.GuessAward.prototype.clearAward = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessAward.prototype.hasAward = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 status = 5;
 * @return {number}
 */
proto.linkerProtocol.GuessAward.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessAward.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.GuessAward.prototype.clearStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessAward.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.GuessGuide = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.GuessGuide, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.GuessGuide.displayName = 'proto.linkerProtocol.GuessGuide';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.GuessGuide.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.GuessGuide.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.GuessGuide} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.GuessGuide.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    content: jspb.Message.getField(msg, 2),
    url: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.GuessGuide}
 */
proto.linkerProtocol.GuessGuide.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.GuessGuide;
  return proto.linkerProtocol.GuessGuide.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.GuessGuide} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.GuessGuide}
 */
proto.linkerProtocol.GuessGuide.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.GuessGuide.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.GuessGuide.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.GuessGuide} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.GuessGuide.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.GuessGuide.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.GuessGuide.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.GuessGuide.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessGuide.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string content = 2;
 * @return {string}
 */
proto.linkerProtocol.GuessGuide.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessGuide.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.GuessGuide.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessGuide.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string url = 3;
 * @return {string}
 */
proto.linkerProtocol.GuessGuide.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.linkerProtocol.GuessGuide.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.GuessGuide.prototype.clearUrl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.GuessGuide.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.HonorLevelUp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.HonorLevelUp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.HonorLevelUp.displayName = 'proto.linkerProtocol.HonorLevelUp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.HonorLevelUp.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.HonorLevelUp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.HonorLevelUp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.HonorLevelUp.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    honorowid: jspb.Message.getField(msg, 2),
    honorlevel: jspb.Message.getField(msg, 3),
    honorname: jspb.Message.getField(msg, 4),
    honorowisgray: jspb.Message.getField(msg, 5),
    type: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.HonorLevelUp}
 */
proto.linkerProtocol.HonorLevelUp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.HonorLevelUp;
  return proto.linkerProtocol.HonorLevelUp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.HonorLevelUp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.HonorLevelUp}
 */
proto.linkerProtocol.HonorLevelUp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHonorowid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHonorlevel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHonorname(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHonorowisgray(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.HonorLevelUp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.HonorLevelUp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.HonorLevelUp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.HonorLevelUp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int32 uid = 1;
 * @return {number}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.HonorLevelUp.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 honorOwid = 2;
 * @return {number}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getHonorowid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.HonorLevelUp.prototype.setHonorowid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearHonorowid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasHonorowid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 honorLevel = 3;
 * @return {number}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getHonorlevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.linkerProtocol.HonorLevelUp.prototype.setHonorlevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearHonorlevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasHonorlevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string honorName = 4;
 * @return {string}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getHonorname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.linkerProtocol.HonorLevelUp.prototype.setHonorname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearHonorname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasHonorname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool honorOwIsGray = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getHonorowisgray = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.linkerProtocol.HonorLevelUp.prototype.setHonorowisgray = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearHonorowisgray = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasHonorowisgray = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 type = 6;
 * @return {number}
 */
proto.linkerProtocol.HonorLevelUp.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.linkerProtocol.HonorLevelUp.prototype.setType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.linkerProtocol.HonorLevelUp.prototype.clearType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.HonorLevelUp.prototype.hasType = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.linkerProtocol.RectifyRoomNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.linkerProtocol.RectifyRoomNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.linkerProtocol.RectifyRoomNotify.displayName = 'proto.linkerProtocol.RectifyRoomNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.linkerProtocol.RectifyRoomNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.linkerProtocol.RectifyRoomNotify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.linkerProtocol.RectifyRoomNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    owid: jspb.Message.getField(msg, 1),
    op: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.linkerProtocol.RectifyRoomNotify}
 */
proto.linkerProtocol.RectifyRoomNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.linkerProtocol.RectifyRoomNotify;
  return proto.linkerProtocol.RectifyRoomNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.linkerProtocol.RectifyRoomNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.linkerProtocol.RectifyRoomNotify}
 */
proto.linkerProtocol.RectifyRoomNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.linkerProtocol.RectifyRoomNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.linkerProtocol.RectifyRoomNotify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.linkerProtocol.RectifyRoomNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 owid = 1;
 * @return {number}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.getOwid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.linkerProtocol.RectifyRoomNotify.prototype.setOwid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.linkerProtocol.RectifyRoomNotify.prototype.clearOwid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.hasOwid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 op = 2;
 * @return {number}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.getOp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.linkerProtocol.RectifyRoomNotify.prototype.setOp = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.linkerProtocol.RectifyRoomNotify.prototype.clearOp = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.linkerProtocol.RectifyRoomNotify.prototype.hasOp = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.linkerProtocol);
